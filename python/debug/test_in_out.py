
from multiprocessing import Pool
from neat_ref import *
import time

gh = GenomeHistory(8, 3)

brian = load_genome("best_genome")

inputs = [[0.3391956417283223, 0.3391956417283223, 0.3391956417283223, 0.3391956417283223, 0.3391956417283223, 0.3391956417283223, 0.3391956417283223, 0.3391956417283223], [0.9513804984642398, 0.9513804984642398, 0.9513804984642398, 0.9513804984642398, 0.9513804984642398, 0.9513804984642398, 0.9513804984642398, 0.9513804984642398], [0.4320967207105393, 0.4320967207105393, 0.4320967207105393, 0.4320967207105393, 0.4320967207105393, 0.4320967207105393, 0.4320967207105393, 0.4320967207105393], [0.1819282221592744, 0.1819282221592744, 0.1819282221592744, 0.1819282221592744, 0.1819282221592744, 0.1819282221592744, 0.1819282221592744, 0.1819282221592744],
          [0.6389302784162648, 0.6389302784162648, 0.6389302784162648, 0.6389302784162648, 0.6389302784162648, 0.6389302784162648, 0.6389302784162648, 0.6389302784162648], [0.682837963515962, 0.682837963515962, 0.682837963515962, 0.682837963515962, 0.682837963515962, 0.682837963515962, 0.682837963515962, 0.682837963515962], [0.5809184493765449, 0.5809184493765449, 0.5809184493765449, 0.5809184493765449, 0.5809184493765449, 0.5809184493765449, 0.5809184493765449, 0.5809184493765449], [0.44880142576545723, 0.44880142576545723, 0.44880142576545723, 0.44880142576545723, 0.44880142576545723, 0.44880142576545723, 0.44880142576545723, 0.44880142576545723], [0.47596041938299394, 0.47596041938299394, 0.47596041938299394, 0.47596041938299394, 0.47596041938299394, 0.47596041938299394, 0.47596041938299394, 0.47596041938299394],
          [0.35852297796303323, 0.35852297796303323, 0.35852297796303323, 0.35852297796303323, 0.35852297796303323, 0.35852297796303323, 0.35852297796303323, 0.35852297796303323]]

expected_out = [[0.7085275930154674, 0.2612424983374719, 0.9696300058434952], [0.9235337423577681, 0.05138476923236546, 0.9999395937589822], [0.7561195837360263, 0.21011519060268952, 0.9880151417275909], [0.6169000658261786, 0.36411479730469215, 0.8650208187935294], [0.8419955744392652, 0.12367210815235366, 0.9985343510593844], [0.8566980695605514, 0.1098114148671679, 0.999063405517114], [0.8207206366739129, 0.14426365040200056, 0.9973529084225068], [0.7640955062972157, 0.201744685687238, 0.9898755146822097], [0.7766736982677465, 0.18867255769821498, 0.992308647235096], [0.7188684568106766, 0.2499737254929463, 0.9749327693991424]]


outs: list[list[float]] = []
for i in inputs:
    outs.append(brian.get_outputs(i))

for data in zip(outs, expected_out):
    if data[0] != data[1]:
        raise Exception("wrong")

print("All good, start benchmark")


amount = 10000
total_start = time.perf_counter()
for _ in range(amount):
    for i in inputs:
        brian.get_outputs(i)

total_stop = time.perf_counter()


total_amount = amount * len(inputs)
total_time = total_stop - total_start

print(f"Total times:\t {total_amount}")
print(f"Total time:\t {total_time}ms")
print(f"Time per exec:\t {total_time / total_amount}ms")

print()


# Total times:     100000
# Total time:      6.818050300003961ms
# Time per exec:   6.818050300003961e-05ms
